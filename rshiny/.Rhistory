rm(list=ls())
setwd("/homework1")
library(ggplot2)
library(grid)
library(gridExtra)
mydata <- read.csv(file="Tour_de_France.csv")
p1 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
p2 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(0, 12)) +
labs(x="Fatigue", y="Disruptions")
p3 = ggplot(data = mydata,
mapping = aes(x=Crashes, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(10,14), ylim=c(0, 12)) +
labs(x="Crashes", y="Disruptions")
# grid.arrange(p1, p2, p3, nrow = 1)
p4 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes, colour=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
#grid.arrange(p4)
source("ParetoSorting.R")
input <- matrix(c(mydata$Fatigue,mydata$Crashes))
result <- ParetoSorting_adv(input,"MIN")
table(result)
(1:2306)[result==0]
rm(list=ls())
setwd("/homework1")
library(ggplot2)
library(grid)
library(gridExtra)
mydata <- read.csv(file="Tour_de_France.csv")
p1 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
p2 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(0, 12)) +
labs(x="Fatigue", y="Disruptions")
p3 = ggplot(data = mydata,
mapping = aes(x=Crashes, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(10,14), ylim=c(0, 12)) +
labs(x="Crashes", y="Disruptions")
# grid.arrange(p1, p2, p3, nrow = 1)
p4 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes, colour=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
#grid.arrange(p4)
source("ParetoSorting.R")
input <- matrix(c(mydata$Fatigue,mydata$Crashes))
result <- ParetoSorting_adv(input,"MIN")
table(result)
(1:2306)[result==0]
rm(list=ls())
setwd("/homework1")
library(ggplot2)
library(grid)
library(gridExtra)
mydata <- read.csv(file="Tour_de_France.csv")
p1 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
p2 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(0, 12)) +
labs(x="Fatigue", y="Disruptions")
p3 = ggplot(data = mydata,
mapping = aes(x=Crashes, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(10,14), ylim=c(0, 12)) +
labs(x="Crashes", y="Disruptions")
# grid.arrange(p1, p2, p3, nrow = 1)
p4 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes, colour=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
#grid.arrange(p4)
source("ParetoSorting.R")
input <- matrix(c(mydata$Fatigue,mydata$Crashes))
result <- ParetoSorting_adv(input,"MIN")
table(result)
(1:2306)[result==0]
rm(list=ls())
setwd("/homework1")
library(ggplot2)
library(grid)
library(gridExtra)
mydata <- read.csv(file="Tour_de_France.csv")
p1 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
p2 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(0, 12)) +
labs(x="Fatigue", y="Disruptions")
p3 = ggplot(data = mydata,
mapping = aes(x=Crashes, y=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(10,14), ylim=c(0, 12)) +
labs(x="Crashes", y="Disruptions")
# grid.arrange(p1, p2, p3, nrow = 1)
p4 = ggplot(data = mydata,
mapping = aes(x=Fatigue, y=Crashes, colour=Disruptions)) +
geom_point(size=1) +
coord_cartesian(xlim=c(0,20), ylim=c(10, 14)) +
labs(x="Fatigue", y="Crashes")
grid.arrange(p4)
source("ParetoSorting.R")
input <- matrix(c(mydata$Fatigue,mydata$Crashes))
result <- ParetoSorting_adv(input,"MIN")
table(result)
(1:2306)[result==0]
install.packages("shiny")
shiny::runApp('rshiny')
install.packages(c("DT", "tidyr"))
shiny::runApp()
install.packages("shinydashboard")
install.packages("plotly")
runApp()
runApp()
load("/Users/yingninggui/Desktop/3A/40.014 ESA/r-apps/rshiny/ca_food_name.rda")
load("/Users/yingninggui/Desktop/3A/40.014 ESA/r-apps/rshiny/ca_conversion_factor.rda")
ca_food_name
load("~/Desktop/3A/40.014 ESA/r-apps/rshiny/ca_conversion_factor.rda")
shiny::runApp()
cards_data
cards_data <- read.csv(file="cards.csv")
cards_data <- read.csv(file="cards.csv")
runApp()
cards_data <- read.csv(file="cards.csv")
cards_data <- read.csv(file="card.csv")
cards_data <- read.csv(file="cards.csv")
cards_data
actions <- cards_data$Actions
effect <- cards_data$Effect
quantity <- cards_data$Quantity
actions
actions <- cards_data$Actions
actions <- cards_data$Action
actions
effect <- cards_data$Effect
effects
effects <- cards_data$Effect
effects
quantities <- cards_data$Quantity
quantities
runApp()
counters_df <- shiny::reactiveValues()
counters_df$df <- data.frame("infected" = numeric(),
"recovered" = numeric())
fluidRow(
column(2,
output$Infected <- renderValueBox({
valueBox("Infected","Number of people infected", icon = icon("virus"), color = "red")
}),
output$Recovered <- renderValueBox({
valueBox("Recovered", "Number of people recovered", icon = icon("heartbeat"), color = "green")
}),
),
)
runApp()
runApp()
runApp()
fluidRow()
fluidRow()
fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install_github("nik01010/dashboardthemes")
library(devtools)
install_github("nik01010/dashboardthemes")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("nik01010/dashboardthemes")
runApp()
actionButton()
actionButton
actionButton('start','Start Game')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Actions", style = "color: black; font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace }"))
),
selectizeInput(
'action_id', '1. Action', choices = actions,
options = list(
placeholder = 'select action',
onInitialize = I('function() { this.setValue(""); }')
),
),
selectizeInput(
'effect_id', '2. Type of Effect', choices = effect,
options = list(
placeholder = 'select effect',
onInitialize = I('function() { this.setValue(""); }')
)
),
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='color: black; font-size: 42px; font-weight: bold; font-family: monospace')
),
),
fluidRow(
column(12,align="center", style='color: black; font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",),
valueBoxOutput("Recovered"),
valueBoxOutput("Time"),
),
),
fluidRow(
img(src='placeholder.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;"),
),
)
)
runApp()
runApp()
hr()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/3A/40.014 ESA/Project/Official/ESAProject2020Team06/rshiny')
