ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
actionButton("submit"),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
library(shiny)
library(shinydashboard)
library(lubridate)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
effects <- cards_data$Effect
quantities <- cards_data$Quantity
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
actionButton("submit"),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(lubridate)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
effects <- cards_data$Effect
quantities <- cards_data$Quantity
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
server <- function(input, output, session) {
timer <- reactiveVal(7200)
active <- reactiveVal(FALSE)
counter <- shiny::reactiveValues()
counter$df <- data.frame("infected" = numeric(),
"recovered" = numeric(),
"funding" = numeric(),
stringsAsFactors = F)
c_name <- eventReactive(input$card_desp)
card <- subset(cards_data, cards_data[,1] == c_name)
quantities <- card[1,2]
observeEvent(input$submit, {
counter$infected <- counter$infected - quantities[0]
counter$recovered <- counter$recovered - quantities[1]
counter$funding <- counter$funding - quantities[2]
})
output$Infected <- renderValueBox({
valueBox("###000","Total Infected", color = "red")
})
output$Recovered <- renderValueBox({
valueBox("###000", "Total Recovered", color = "green")
})
output$Funding <- renderValueBox({
valueBox("###000", "Total Funding", color = "yellow")
})
output$Time <- renderValueBox({
valueBox(renderText({paste(seconds_to_period(timer()))}), "Time Remaining", color = "black")
})
observe({
invalidateLater(7200, session)
isolate({
if(active()) {
timer(timer()-1)
if(timer()<1) {
active(FALSE)
showModal(modalDialog(title =  span("Game Over", style = "font-size: 24px; font-weight: bold; font-family: monospace"),
renderText({paste("You were able to save ", counter$recovered, " people.")}),
renderText({paste("You allowed ", counter$infected, " people to be infected.")}),
renderText({paste("Your final score is ", counter$infected - counter$recovered, ".")}),
style='font-size: 16px; font-weight: bold; font-family: monospace',))
}
}
})
})
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
}
library(shiny)
library(shinydashboard)
library(lubridate)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
effects <- cards_data$Effect
quantities <- cards_data$Quantity
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
server <- function(input, output, session) {
timer <- reactiveVal(7200)
active <- reactiveVal(FALSE)
counter <- shiny::reactiveValues()
counter$df <- data.frame("infected" = numeric(),
"recovered" = numeric(),
"funding" = numeric(),
stringsAsFactors = F)
c_name <- eventReactive(input$card_desp)
card <- subset(cards_data, cards_data[,1] == c_name)
quantities <- card[1,2]
observeEvent(input$submit, {
counter$infected <- counter$infected - quantities[0]
counter$recovered <- counter$recovered - quantities[1]
counter$funding <- counter$funding - quantities[2]
})
output$Infected <- renderValueBox({
valueBox("###000","Total Infected", color = "red")
})
output$Recovered <- renderValueBox({
valueBox("###000", "Total Recovered", color = "green")
})
output$Funding <- renderValueBox({
valueBox("###000", "Total Funding", color = "yellow")
})
output$Time <- renderValueBox({
valueBox(renderText({paste(seconds_to_period(timer()))}), "Time Remaining", color = "black")
})
observe({
invalidateLater(7200, session)
isolate({
if(active()) {
timer(timer()-1)
if(timer()<1) {
active(FALSE)
showModal(modalDialog(title =  span("Game Over", style = "font-size: 24px; font-weight: bold; font-family: monospace"),
renderText({paste("You were able to save ", counter$recovered, " people.")}),
renderText({paste("You allowed ", counter$infected, " people to be infected.")}),
renderText({paste("Your final score is ", counter$infected - counter$recovered, ".")}),
style='font-size: 16px; font-weight: bold; font-family: monospace',))
}
}
})
})
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
}
library(shiny)
library(shinydashboard)
library(lubridate)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
effects <- cards_data$Effect
quantities <- cards_data$Quantity
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
server <- function(input, output, session) {
timer <- reactiveVal(7200)
active <- reactiveVal(FALSE)
counter <- shiny::reactiveValues()
counter$df <- data.frame("infected" = numeric(),
"recovered" = numeric(),
"funding" = numeric(),
stringsAsFactors = F)
c_name <- eventReactive(input$card_desp)
card <- subset(cards_data, cards_data[,1] == c_name)
quantities <- card[1,2]
observeEvent(input$submit, {
counter$infected <- counter$infected - quantities[0]
counter$recovered <- counter$recovered - quantities[1]
counter$funding <- counter$funding - quantities[2]
})
output$Infected <- renderValueBox({
valueBox("###000","Total Infected", color = "red")
})
output$Recovered <- renderValueBox({
valueBox("###000", "Total Recovered", color = "green")
})
output$Funding <- renderValueBox({
valueBox("###000", "Total Funding", color = "yellow")
})
output$Time <- renderValueBox({
valueBox(renderText({paste(seconds_to_period(timer()))}), "Time Remaining", color = "black")
})
observe({
invalidateLater(7200, session)
isolate({
if(active()) {
timer(timer()-1)
if(timer()<1) {
active(FALSE)
showModal(modalDialog(title =  span("Game Over", style = "font-size: 24px; font-weight: bold; font-family: monospace"),
renderText({paste("You were able to save ", counter$recovered, " people.")}),
renderText({paste("You allowed ", counter$infected, " people to be infected.")}),
renderText({paste("Your final score is ", counter$infected - counter$recovered, ".")}),
style='font-size: 16px; font-weight: bold; font-family: monospace',))
}
}
})
})
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(lubridate)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
quantities <- cards_data$Quantity
ui <- dashboardPage(skin="black",
dashboardHeader(title = span("Input Card", style = "font-size: 18px; font-weight: bold; font-family: monospace")),
dashboardSidebar(
tags$head(
tags$style(HTML(".main-sidebar {font-family: monospace}"))
),
selectizeInput(
'card_desp', '1. Card', choices = cards,
options = list(
placeholder = 'select card',
onInitialize = I('function() { this.setValue(""); }')
)
),
actionButton('submit', 'Submit'),
hr(),
fluidRow(column(4,
actionButton('start','Start Game'),
actionButton('stop','End Game')
)
)
),
dashboardBody(
fluidRow(
titlePanel(
h1("Going Viral", align = "center", style='font-size: 42px; font-weight: bold; font-family: monospace')
)
),
fluidRow(
column(12,align="center", style='font-size: 42px; font-weight: bold; font-family: monospace',
valueBoxOutput("Infected",width=3),
valueBoxOutput("Recovered", width=3),
valueBoxOutput("Funding", width=3),
valueBoxOutput("Time", width=3)
)
),
fluidRow(
img(src='map.png',width='1200',style="display: block; margin-left: auto; margin-right: auto;")
)
)
)
server <- function(input, output, session) {
timer <- reactiveVal(7200)
active <- reactiveVal(FALSE)
counter <- shiny::reactiveValues()
counter$df <- data.frame("infected" = numeric(),
"recovered" = numeric(),
"funding" = numeric(),
stringsAsFactors = F)
c_name <- eventReactive(input$card_desp)
card <- subset(cards_data, cards_data[,1] == c_name)
quantities <- card[1,2]
observeEvent(input$submit, {
counter$infected <- counter$infected - quantities[0]
counter$recovered <- counter$recovered - quantities[1]
counter$funding <- counter$funding - quantities[2]
})
output$Infected <- renderValueBox({
valueBox("###000","Total Infected", color = "red")
})
output$Recovered <- renderValueBox({
valueBox("###000", "Total Recovered", color = "green")
})
output$Funding <- renderValueBox({
valueBox("###000", "Total Funding", color = "yellow")
})
output$Time <- renderValueBox({
valueBox(renderText({paste(seconds_to_period(timer()))}), "Time Remaining", color = "black")
})
observe({
invalidateLater(7200, session)
isolate({
if(active()) {
timer(timer()-1)
if(timer()<1) {
active(FALSE)
showModal(modalDialog(title =  span("Game Over", style = "font-size: 24px; font-weight: bold; font-family: monospace"),
renderText({paste("You were able to save ", counter$recovered, " people.")}),
renderText({paste("You allowed ", counter$infected, " people to be infected.")}),
renderText({paste("Your final score is ", counter$infected - counter$recovered, ".")}),
style='font-size: 16px; font-weight: bold; font-family: monospace',))
}
}
})
})
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
}
shinyApp(ui = ui, server = server)
cards_data <- read.csv(file="cards.csv")
cards <- cards_data$Card
quantities <- cards_data$Quantity
cards
quantities
card <- subset(cards_data, cards_data[,1] == "Set up community donation drive to fund for pandemic relief efforts. Increase funding by 30")
card
card[1,2]
quantities <- card[1,2]
quantities
quantities <- card[1,2][0]
quantities
runApp()
runApp()
runApp()
counter <- shiny::reactiveValues()
input
View(server)
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.vector(unlist([1,2,3]))
as.vector(unlist(1,2,3))
c <- as.vector(unlist([1,2,3]))
c <- as.vector(unlist(1,2,3))
c
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
