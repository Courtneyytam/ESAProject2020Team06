# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
# ...
# ...
# ...
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(...)
priority_1a3 <- c(...)
achievements_1a2 <- data.frame(objective=objective_1a, priority=priority_1a2, p=p_1a, n=n_1a)
achievements_1a3 <- data.frame(objective=objective_1a, priority=priority_1a3, p=p_1a, n=n_1a)
soln_1a2 <- llgp(coefficients_1a, targets_1a, achievements_1a2)
soln_1a3 <- llgp(coefficients_1a, targets_1a, achievements_1a3)
out_1a2 <- llgpout(soln_1a2$tab, coefficients_1a, targets_1a)
out_1a3 <- llgpout(soln_1a3$tab, coefficients_1a, targets_1a)
#
# Finally, we do a graphical comparison of the decisions and objective functions for all problems
#
# Load the package for radar charts
library(fmsb)
#
# Decision variables
mydata_sol_1a <- data.frame(X1=c(out_1a$x[1],out_1a2$x[1],out_1a3$x[1]), X2=c(out_1a$x[2],out_1a2$x[2],out_1a3$x[2]), X3=c(out_1a$x[3],out_1a2$x[3],out_1a3$x[3]))
mydata_sol_1a =  rbind(c(8.5,3,6),c(0,0,0),mydata_sol_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_sol_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
#
# Objective functions -- FILL IN THE LINES BELOW
mydata_obj_1a <- data.frame(J1=c(abs(out_1a$b[1]-out_1a$f[1]),abs(out_1a2$b[1]-out_1a2$f[1]),abs(out_1a3$b[1]-out_1a3$f[1])), J2=c(abs(out_1a$b[2]-out_1a$f[2]),abs(out_1a2$b[2]-out_1a2$f[2]),abs(out_1a3$b[2]-out_1a3$f[2])), J3=c(abs(out_1a$b[3]-out_1a$f[3]),abs(out_1a2$b[3]-out_1a2$f[3]),abs(out_1a3$b[3]-out_1a3$f[3])))
mydata_obj_1a =  rbind(...) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(...)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
######## Activity 1b
# Problem formulation
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# ...
# ...
# Let's rewrite the problem formulation to account for the relative importance of all goals
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1b <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions
targets_1b <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level -- FILL IN THE ROW BELOW
objective_1b <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1b <- c(...)             # level to which the row (i.e. objective) is assigned
p_1b <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1b <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
w_1b <- c(4, 3, 1, 2)             # weight associated with the specific priority level
achievements_1b <- data.frame(objective=objective_1b, priority=priority_1b, p=p_1b, n=n_1b, w=w_1b)
# To solve the problem, we use the function llgp
soln_1b <- llgp(coefficients_1b, targets_1b, achievements_1b)
# Finally, we retrieve the most interesting aspect of the solution
out_1b <- llgpout(soln_1b$tab, coefficients_1b, targets_1b)
#
# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(...)
# Script for Activity 1a and 1b -- Lecture 17
######## Load data and packages
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Set the working folder
setwd("lecture17")
# Package for Goal Programming
library(goalprog)
library(ggplot)
######## Activity 1a
# Problem formulation -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3 >= 0
# p1, p2, p3 >= 0
# Let's rewrite the problem formulation to account for the relative importance of all goals -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3, n4 >= 0
# p1, p2, p3, p4 >= 0
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions -- FILL IN THE LINE BELOW
coefficients_1a <- matrix (c(...), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions -- FILL IN THE LINE BELOW
targets_1a <- c(...)
# A data frame with the deviation variables for each objective together with the priority level
objective_1a <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1a <- c(1, 2, 3, 4)      # level to which the row (i.e. objective) is assigned
p_1a <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1a <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
# To solve the problem, we use the function llgp -- FILL IN THE LINE BELOW
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
# Finally, we retrieve the most interesting aspect of the solution
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
#
# A vector of target values for the objective functions -- FILL IN THE LINE BELOW
targets_1a <- c(48, 32, 7, 10)
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(...)
# A vector of target values for the objective functions
targets_1a <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level
objective_1a <- c(1, 2, 3, 4)     # index for a particular problem object
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1a <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
priority_1a <- c(1, 2, 3, 4)      # level to which the row (i.e. objective) is assigned
p_1a <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1a <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
# To solve the problem, we use the function llgp -- FILL IN THE LINE BELOW
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
# Finally, we retrieve the most interesting aspect of the solution
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
out_1a
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1b <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# Script for Activity 1a and 1b -- Lecture 17
######## Load data and packages
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Set the working folder
setwd("lecture17")
# Package for Goal Programming
library(goalprog)
library(ggplot)
######## Activity 1a
# Problem formulation -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3 >= 0
# p1, p2, p3 >= 0
# Let's rewrite the problem formulation to account for the relative importance of all goals -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3, n4 >= 0
# p1, p2, p3, p4 >= 0
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1a <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions
targets_1a <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level
objective_1a <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1a <- c(1, 2, 3, 4)      # level to which the row (i.e. objective) is assigned
p_1a <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1a <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
# To solve the problem, we use the function llgp -- FILL IN THE LINE BELOW
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
# Finally, we retrieve the most interesting aspect of the solution
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
#
# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
# ...
# ...
# ...
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(1, 2, 3, 2)
priority_1a3 <- c(1, 3, 2, 3)
achievements_1a2 <- data.frame(objective=objective_1a, priority=priority_1a2, p=p_1a, n=n_1a)
achievements_1a3 <- data.frame(objective=objective_1a, priority=priority_1a3, p=p_1a, n=n_1a)
soln_1a2 <- llgp(coefficients_1a, targets_1a, achievements_1a2)
soln_1a3 <- llgp(coefficients_1a, targets_1a, achievements_1a3)
out_1a2 <- llgpout(soln_1a2$tab, coefficients_1a, targets_1a)
out_1a3 <- llgpout(soln_1a3$tab, coefficients_1a, targets_1a)
#
# Finally, we do a graphical comparison of the decisions and objective functions for all problems
#
# Load the package for radar charts
library(fmsb)
#
# Decision variables
mydata_sol_1a <- data.frame(X1=c(out_1a$x[1],out_1a2$x[1],out_1a3$x[1]), X2=c(out_1a$x[2],out_1a2$x[2],out_1a3$x[2]), X3=c(out_1a$x[3],out_1a2$x[3],out_1a3$x[3]))
mydata_sol_1a =  rbind(c(8.5,3,6),c(0,0,0),mydata_sol_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_sol_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
#
# Objective functions -- FILL IN THE LINES BELOW
mydata_obj_1a <- data.frame(J1=c(abs(out_1a$b[1]-out_1a$f[1]),abs(out_1a2$b[1]-out_1a2$f[1]),abs(out_1a3$b[1]-out_1a3$f[1])), J2=c(abs(out_1a$b[2]-out_1a$f[2]),abs(out_1a2$b[2]-out_1a2$f[2]),abs(out_1a3$b[2]-out_1a3$f[2])), J3=c(abs(out_1a$b[3]-out_1a$f[3]),abs(out_1a2$b[3]-out_1a2$f[3]),abs(out_1a3$b[3]-out_1a3$f[3])))
mydata_obj_1a =  rbind(c(2,9,8),c(0,0,0),mydata_obj_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_obj_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
# Script for Activity 1a and 1b -- Lecture 17
######## Load data and packages
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Set the working folder
setwd("lecture17")
# Package for Goal Programming
library(goalprog)
library(ggplot)
######## Activity 1a
# Problem formulation -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3 >= 0
# p1, p2, p3 >= 0
# Let's rewrite the problem formulation to account for the relative importance of all goals -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3, n4 >= 0
# p1, p2, p3, p4 >= 0
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1a <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions
targets_1a <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level
objective_1a <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1a <- c(1, 2, 3, 4)      # level to which the row (i.e. objective) is assigned
p_1a <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1a <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
# To solve the problem, we use the function llgp -- FILL IN THE LINE BELOW
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
# Finally, we retrieve the most interesting aspect of the solution
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
#
# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
# ...
# ...
# ...
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(1, 2, 2, 3)
priority_1a3 <- c(1, 3, 2, 2)
achievements_1a2 <- data.frame(objective=objective_1a, priority=priority_1a2, p=p_1a, n=n_1a)
achievements_1a3 <- data.frame(objective=objective_1a, priority=priority_1a3, p=p_1a, n=n_1a)
soln_1a2 <- llgp(coefficients_1a, targets_1a, achievements_1a2)
soln_1a3 <- llgp(coefficients_1a, targets_1a, achievements_1a3)
out_1a2 <- llgpout(soln_1a2$tab, coefficients_1a, targets_1a)
out_1a3 <- llgpout(soln_1a3$tab, coefficients_1a, targets_1a)
#
# Finally, we do a graphical comparison of the decisions and objective functions for all problems
#
# Load the package for radar charts
library(fmsb)
#
# Decision variables
mydata_sol_1a <- data.frame(X1=c(out_1a$x[1],out_1a2$x[1],out_1a3$x[1]), X2=c(out_1a$x[2],out_1a2$x[2],out_1a3$x[2]), X3=c(out_1a$x[3],out_1a2$x[3],out_1a3$x[3]))
mydata_sol_1a =  rbind(c(8.5,3,6),c(0,0,0),mydata_sol_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_sol_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
#
# Objective functions -- FILL IN THE LINES BELOW
mydata_obj_1a <- data.frame(J1=c(abs(out_1a$b[1]-out_1a$f[1]),abs(out_1a2$b[1]-out_1a2$f[1]),abs(out_1a3$b[1]-out_1a3$f[1])), J2=c(abs(out_1a$b[2]-out_1a$f[2]),abs(out_1a2$b[2]-out_1a2$f[2]),abs(out_1a3$b[2]-out_1a3$f[2])), J3=c(abs(out_1a$b[3]-out_1a$f[3]),abs(out_1a2$b[3]-out_1a2$f[3]),abs(out_1a3$b[3]-out_1a3$f[3])))
mydata_obj_1a =  rbind(c(2,9,8),c(0,0,0),mydata_obj_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_obj_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
# Script for Activity 1a and 1b -- Lecture 17
######## Load data and packages
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Set the working folder
setwd("lecture17")
# Package for Goal Programming
library(goalprog)
library(ggplot)
######## Activity 1a
# Problem formulation -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3 >= 0
# p1, p2, p3 >= 0
# Let's rewrite the problem formulation to account for the relative importance of all goals -- FILL IN THE LINE BELOW
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# P1, P2, P3 >= 0
# n1, n2, n3, n4 >= 0
# p1, p2, p3, p4 >= 0
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1a <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions
targets_1a <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level
objective_1a <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1a <- c(1, 2, 3, 4)      # level to which the row (i.e. objective) is assigned
p_1a <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1a <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
# To solve the problem, we use the function llgp -- FILL IN THE LINE BELOW
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
# Finally, we retrieve the most interesting aspect of the solution
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
#
# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
# ...
# ...
# ...
# Let's try with the following combinations of lexicographic ordering -- FILL IN THE LINES BELOW
priority_1a2 <- c(1, 2, 3, 2)
priority_1a3 <- c(1, 3, 2, 3)
achievements_1a2 <- data.frame(objective=objective_1a, priority=priority_1a2, p=p_1a, n=n_1a)
achievements_1a3 <- data.frame(objective=objective_1a, priority=priority_1a3, p=p_1a, n=n_1a)
soln_1a2 <- llgp(coefficients_1a, targets_1a, achievements_1a2)
soln_1a3 <- llgp(coefficients_1a, targets_1a, achievements_1a3)
out_1a2 <- llgpout(soln_1a2$tab, coefficients_1a, targets_1a)
out_1a3 <- llgpout(soln_1a3$tab, coefficients_1a, targets_1a)
#
# Finally, we do a graphical comparison of the decisions and objective functions for all problems
#
# Load the package for radar charts
library(fmsb)
#
# Decision variables
mydata_sol_1a <- data.frame(X1=c(out_1a$x[1],out_1a2$x[1],out_1a3$x[1]), X2=c(out_1a$x[2],out_1a2$x[2],out_1a3$x[2]), X3=c(out_1a$x[3],out_1a2$x[3],out_1a3$x[3]))
mydata_sol_1a =  rbind(c(8.5,3,6),c(0,0,0),mydata_sol_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_sol_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
#
# Objective functions -- FILL IN THE LINES BELOW
mydata_obj_1a <- data.frame(J1=c(abs(out_1a$b[1]-out_1a$f[1]),abs(out_1a2$b[1]-out_1a2$f[1]),abs(out_1a3$b[1]-out_1a3$f[1])), J2=c(abs(out_1a$b[2]-out_1a$f[2]),abs(out_1a2$b[2]-out_1a2$f[2]),abs(out_1a3$b[2]-out_1a3$f[2])), J3=c(abs(out_1a$b[3]-out_1a$f[3]),abs(out_1a2$b[3]-out_1a2$f[3]),abs(out_1a3$b[3]-out_1a3$f[3])))
mydata_obj_1a =  rbind(c(2,9,8),c(0,0,0),mydata_obj_1a) # To use the fmsb package, we have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
radarchart(mydata_obj_1a)
legend(1,1,lty=c(1,1),lwd=c(2.5,2.5),col=c("black","green","red"),c("Alternative 1","Alternative 2","Alternative 3"),cex=0.8)
######## Activity 1b
# Problem formulation
#
# Minimize [...]
# subject to:
# ...
# ...
# ...
# ...
# ...
# ...
# Let's rewrite the problem formulation to account for the relative importance of all goals
#
# Minimize [5n1 + 4n2 + 3p3 + 2p4]
# subject to:
# 12P1 + 9P2 + 15P3 - p1 + n1 = 125
# 5P1  + 3P2 + 4P3  - p2 + n2 = 40
# 5P1  + 7P2 + 8P3  - p3 + n3 = 55
# 5P1  + 3P2 + 4P3  - p4 + n4 = 40
# P1, P2, P3 >= 0
# n1, n2, n3, n4 >= 0
# p1, p2, p3, p4 >= 0
# To set up the problem with goalprog, we must define three variables
#
# A matrix of coefficients for the linear objective functions
coefficients_1b <- matrix (c(12, 9, 15, 5, 3, 4, 5, 7, 8, 5, 3, 4), nrow=4, byrow=TRUE)
# A vector of target values for the objective functions
targets_1b <- c(125, 40, 55, 40)
# A data frame with the deviation variables for each objective together with the priority level -- FILL IN THE ROW BELOW
objective_1b <- c(1, 2, 3, 4)     # index for a particular problem object
priority_1b <- c(1, 1, 1, 1)      # level to which the row (i.e. objective) is assigned
p_1b <- c(0, 0, 3, 2)             # penalty associated with the positive deviation variable
n_1b <- c(5, 4, 0, 0)             # penalty associated with the negative deviation variable
w_1b <- c(4, 3, 1, 2)             # weight associated with the specific priority level
achievements_1b <- data.frame(objective=objective_1b, priority=priority_1b, p=p_1b, n=n_1b, w=w_1b)
# To solve the problem, we use the function llgp
soln_1b <- llgp(coefficients_1b, targets_1b, achievements_1b)
# Finally, we retrieve the most interesting aspect of the solution
out_1b <- llgpout(soln_1b$tab, coefficients_1b, targets_1b)
#
# Decision variables
# X
# ...
# ...
# ...
#
# Summary of objectives
# Objective           Over          Under         Target
# ...
# ...
# ...
# ...
#
# Achievement function
# A
# ...
out_1b
